#+title: Config
#+author: Leo Aparisi de Lannoy
#+latex_class: article
#+latex_compiler: xelatex

* Lexical Bindings
#+begin_src emacs-lisp
;;; config.el -*- lexical-binding: t; -*-
#+end_src
* Compilation
#+begin_src emacs-lisp
;; brew tap railwaycat/emacsmacport
;; brew install emacs-mac --with-mac-metal --with-natural-title-bar --with-native-compilation --with-xwidget
#+end_src
* Basic
** ID
#+begin_src emacs-lisp
(setq user-full-name "Leo Aparisi de Lannoy"
      user-mail-address "leoaparisi@gmail.com")
#+end_src
** Good defaults
#+begin_src emacs-lisp
(after! evil
(setq evil-want-fine-undo t)
(setq scroll-margin 99999)
(setq scroll-conservatively 0)
(setq maximum-scroll-margin 0.5)
(advice-add 'evil-scroll-up :after #'evil-scroll-line-to-center   )
(advice-add 'evil-scroll-down :after #'evil-scroll-line-to-center   )
)                       ; By default while in insert all changes are one big blob. Be more granular

#+end_src
*** Browser
#+begin_src emacs-lisp
(setq browse-url-chrome-program "brave")
#+end_src
** Dirvish
#+begin_src emacs-lisp :lexical no
 (after! dirvish
   (setq dirvish-attributes'(vc-state subtree-state nerd-icons git-msg file-time file-size))
      (setq dirvish-default-layout '(0 0.4 0.6))
)
#+end_src
** Visual
*** Font
#+begin_src emacs-lisp
(after! doom-ui
(setq doom-font (font-spec :family "Iosevka" :size 14)
      doom-variable-pitch-font (font-spec :family "Iosevka Aile")
      doom-unicode-font (font-spec :family "Iosevka")
      doom-big-font (font-spec :family "Iosevka" :size 24)
      doom-serif-font (font-spec :family "Iosevka Aile" :weight 'light)))
#+end_src
*** Theme
**** Default theme
#+begin_src emacs-lisp
;; (setq doom-theme 'doom-nord)
(after! doom-ui
(setq doom-theme `doom-nord)
)
#+end_src
*** Default visual
*** Starting image
#+begin_src emacs-lisp
;; (setq fancy-splash-image (expand-file-name "themes/doom-emacs-bw-light.svg" doom-user-dir))
#+end_src
** File Templates
#+begin_src emacs-lisp
(set-file-template! "\\.tex$" :trigger "__" :mode 'latex-mode)
(set-file-template! "\\.org$" :trigger "__" :mode 'org-mode)
#+end_src
** Editor config
#+begin_src emacs-lisp
(setq display-line-numbers-type `relative)
(setq-default tab-width 4)
#+end_src

#+RESULTS:
: 4

* Org-Mode
** Defaults
#+begin_src emacs-lisp
(after! org
(setq org-directory "~/org/"
      org-agenda-files (list org-directory)                  ; Seems like the obvious place.
      org-use-property-inheritance t                         ; It's convenient to have properties inherited.
      org-log-done 'time                                     ; Having the time a item is done sounds convenient.
      org-list-allow-alphabetical t                          ; Have a. A. a) A) list bullets.
      org-catch-invisible-edits 'smart                       ; Try not to accidently do weird stuff in invisible regions.
      org-export-with-sub-superscripts '{}                   ; Don't treat lone _ / ^ as sub/superscripts, require _{} / ^{}.
      org-export-allow-bind-keywords t                       ; Bind keywords can be handy
      org-image-actual-width '(0.9)))                         ; Make the in-buffer display closer to the exported result..
#+end_src
** Babel
#+begin_src emacs-lisp
(after! org-babel
(setq org-babel-default-header-args
      '((:session . "none")
        (:results . "replace")
        (:exports . "code")
        (:cache . "no")
        (:noweb . "no")
        (:hlines . "no")
        (:tangle . "no")
        (:comments . "link"))))
#+end_src
*** Completion
#+begin_src emacs-lisp :tangle packages.el
(package! org-block-capf :recipe (:host github :repo "xenodium/org-block-capf"))
#+end_src
#+begin_src emacs-lisp
(use-package! org-block-capf
  :after org
  :hook (org-mode . org-block-capf-add-to-completion-at-point-functions))
#+end_src
* Cape
#+begin_src emacs-lisp :lexical no
 (after! cape
   (setq cape-dabbrev-min-length 2)
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-keyword)
  (add-hook 'completion-at-point-functions #'cape-line)
  (add-hook 'completion-at-point-functions #'cape-history)
  )
#+end_src
** Agenda
#+begin_src emacs-lisp :lexical no
(after! org
(setq org-agenda-skip-scheduled-if-done nil
      org-agenda-skip-deadline-if-done nil
        org-agenda-tags-column 0
        org-agenda-block-separator ?─
        org-agenda-time-grid
        '((daily today require-timed)
        (800 1000 1200 1400 1600 1800 2000)
        " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
        org-agenda-current-time-string
        "◀── now ─────────────────────────────────────────────────"))
#+end_src
** Visuals
*** Org-modern
#+begin_src emacs-lisp :tangle packages.el
(package! org-modern)
#+end_src
#+begin_src emacs-lisp
(use-package! org-modern
  :after org
  :hook ((org-mode . org-modern-mode) (org-agenda-finalize . org-modern-agenda))
  :config
  (setq org-modern-star '("◉" "○" "✸" "✿" "✤" "✜" "◆" "▶")
        org-modern-hide-stars nil
        org-modern-table-vertical 1
        org-modern-table-horizontal 0.2
        org-modern-block-name t
        org-modern-progress t
        org-modern-horizontal-rule t
        org-modern-keyword t))
#+end_src
*** Org-superstar
#+begin_src emacs-lisp :lexical no :tangle packages.el
 (package! org-superstar)
#+end_src
#+begin_src emacs-lisp :lexical no
 (use-package! org-superstar
   :hook (org-mode . (lambda () (org-superstar-mode 1))))
#+end_src
*** Org-appear
#+begin_src emacs-lisp :lexical no :tangle packages.el
(package! org-appear :recipe (:host github :repo "awth13/org-appear"))
#+end_src
#+begin_src emacs-lisp :lexical no
(use-package! org-appear
        :hook (org-mode . org-appear-mode)
        :config
        (setq org-appear-autoemphasis t
                org-appear-autosubmarkers t
                org-appear-autolinks t
                org-appear-autokeywords t
                org-appear-autoentities t
                org-appear-inside-latex t
                org-appear-autosubmarkers t))
#+end_src
*** General
#+begin_src emacs-lisp
(after! org
(setq org-src-fontify-natively t
      org-fontify-whole-heading-line t
      org-fontify-done-headline t
      org-fontify-quote-and-verse-blocks t
      org-startup-with-inline-images t
      org-startup-indented t
      ;; Org styling, hide markup etc.
      org-pretty-entities t
      org-hide-leading-stars t
      org-priority-highest ?A
      org-priority-lowest ?E
      org-priority-faces
      '((?A . 'nerd-icons-red)
        (?B . 'nerd-icons-orange)
        (?C . 'nerd-icons-yellow)
        (?D . 'nerd-icons-green)
        (?E . 'nerd-icons-blue))))
(add-hook 'org-mode-hook #'+org-pretty-mode)
#+end_src

*** Ligatures
*** Latex improvement
#+begin_src emacs-lisp
(after! org
  (setq org-highlight-latex-and-related '(native script entities)))
#+end_src
#+begin_src emacs-lisp :tangle packages.el
 (package! org-fragtog)
#+end_src
#+begin_src emacs-lisp
 (use-package! org-fragtog
   :after org
   :hook (org-mode . org-fragtog-mode))
#+end_src
** Bullets
#+begin_src emacs-lisp
(after! org
(setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+") ("1." . "a."))))
#+end_src
** Agenda
** Contact
#+begin_src emacs-lisp :lexical no :tangle packages.el
 (package! org-vcard)
#+end_src
#+begin_src emacs-lisp :lexical no
(after! mu4e
    (setq mu4e-org-contacts-file  "~/org/contacts.org")
  (add-to-list 'mu4e-headers-actions
    '("org-contact-add" . mu4e-action-add-org-contact) t)
  (add-to-list 'mu4e-view-actions
    '("org-contact-add" . mu4e-action-add-org-contact) t))

#+end_src
** Pandoc import
#+begin_src emacs-lisp :tangle packages.el
(package! org-pandoc-import
  :recipe (:host github
           :repo "tecosaur/org-pandoc-import"
           :files ("*.el" "filters" "preprocessors")))
#+end_src
#+begin_src emacs-lisp
(use-package! org-pandoc-import
  :after org)
#+end_src
** Zotero Integration
#+begin_src emacs-lisp :tangle packages.el
;; (package! zotxt)
#+end_src
#+begin_src emacs-lisp

;; (use-package! zotxt
;;   :after org)
#+end_src
** Org-Chef
#+begin_src emacs-lisp :tangle packages.el
(package! org-chef)
#+end_src
#+begin_src emacs-lisp
(use-package! org-chef
  :after org
  :commands (org-chef-insert-recipe org-chef-get-recipe-from-url))
#+end_src

** Bibtex-Integration
*** Citar
#+begin_src emacs-lisp :tangle packages.el
(package! org-cite-csl-activate :recipe (:host github :repo "andras-simonyi/org-cite-csl-activate"))
#+end_src
#+begin_src emacs-lisp
(use-package! citar
  :defer t
  :custom
  (org-cite-global-bibliography '("~/org/Lecture_Notes/MyLibrary.bib"))
